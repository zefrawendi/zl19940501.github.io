<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>杀死一只知更鸟观后感</title>
    <url>/2021/05/20/demo/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>电影评论</category>
      </categories>
      <tags>
        <tag>电影</tag>
        <tag>休闲</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>pod</title>
    <url>/2021/05/20/pod/</url>
    <content><![CDATA[<ul>
<li>Namespace – 命令空间实现同一集群上的资源隔离</li>
<li>Pod – K8s的最小运行单元<span id="more"></span></li>
<li>ReplicaSet – 实现pod平滑迭代更新及回滚用，这个不需要我们实际操作</li>
<li>Deployment – 用来发布无状态应用</li>
<li>Health Check – Readiness/Liveness/maxSurge/maxUnavailable 服务健康状态检测</li>
<li>Service, Endpoint – 实现同一lables下的多个pod流量负载均衡</li>
<li>Labels – 标签，服务间选择访问的重要依据</li>
<li>Ingress – K8s的流量入口</li>
<li>DaemonSet – 用来发布守护应用，例如我们部署的CNI插件</li>
<li>HPA – Horizontal Pod Autoscaling 自动水平伸缩</li>
<li>Volume – 存储卷</li>
<li>Pv, pvc, StorageClass – 持久化存储，持久化存储 声明，动态存储pv</li>
<li>StatefulSet – 用来发布有状态应用</li>
<li>Job, CronJob – 一次性任务及定时任务</li>
<li>Configmap, serect – 服务配置及服务加密配置</li>
<li>Kube-proxy – 提供service服务流量转发的功能支持，这个不需要我们实际操作</li>
<li>RBAC, serviceAccount, role, rolebindings, clusterrole, clusterrolebindings – 基于角色的访问控制</li>
<li>Events – K8s事件流，可以用来监控相关事件用，这个不需要我们实际操作</li>
</ul>
<p>看了上面这一堆知识点，大家是不是有点头晕了？ 别担心，上述这些小怪在后面的过关流程中均会一一遇到，并且我会也教会大家怎么去战胜它们，Let’ Go!</p>
<p>OK，此关卡较长，这节课我们先会会Namespace和Pod这两个小怪</p>
<h1 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a><strong>Namespace</strong></h1><p>namespace命令空间，后面简称ns。在K8s上面，大部分资源都受ns的限制，来做资源的隔离，少部分如pv，clusterRole等不受ns控制，这个后面会讲到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看目前集群上有哪些ns</span><br><span class="line"># kubectl get ns</span><br><span class="line">NAME              STATUS        AGE</span><br><span class="line">default           Active        5d3h</span><br><span class="line">kube-node-lease   Active        5d3h</span><br><span class="line">kube-public       Active        5d3h</span><br><span class="line">kube-system       Active        5d3h</span><br><span class="line"></span><br><span class="line"># 通过kubectl 接上 -n namespaceName 来查看对应ns上面的资源信息</span><br><span class="line"># kubectl -n kube-system get pod</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-7fdc86d8ff-2mcm9   1/1     Running   1          29h</span><br><span class="line">calico-node-dlt57                          1/1     Running   1          29h</span><br><span class="line">calico-node-tvzqj                          1/1     Running   1          29h</span><br><span class="line">calico-node-vh6sk                          1/1     Running   1          29h</span><br><span class="line">calico-node-wpsfh                          1/1     Running   1          29h</span><br><span class="line">coredns-d9b6857b5-tt7j2                    1/1     Running   1          29h</span><br><span class="line">metrics-server-869ffc99cd-n2dc4            1/1     Running   2          29h</span><br><span class="line">nfs-provisioner-01-77549d5487-dbmv5        1/1     Running   2          29h</span><br><span class="line"></span><br><span class="line"># 我们通过不接-n 的情况下，都是在默认命令空间default下进行操作，在生产中，通过测试一些资源就在这里进行</span><br><span class="line">[root@node-1 ~]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-867c95f465-njv78   1/1     Running   0          12m</span><br><span class="line">[root@node-1 ~]# kubectl -n default get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-867c95f465-njv78   1/1     Running   0          12m</span><br><span class="line"></span><br><span class="line"># 创建也很简单</span><br><span class="line">[root@node-1 ~]# kubectl create ns test</span><br><span class="line">namespace/test created</span><br><span class="line">[root@node-1 ~]# kubectl get ns|grep test</span><br><span class="line">test  </span><br><span class="line"></span><br><span class="line"># 删除ns</span><br><span class="line"># kubectl delete ns test </span><br><span class="line">namespace &quot;test&quot; deleted</span><br></pre></td></tr></table></figure>

<p>生产中的小技巧：k8s删除namespaces状态一直为terminating问题处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kubectl get ns</span><br><span class="line">NAME              STATUS        AGE</span><br><span class="line">default           Active        5d4h</span><br><span class="line">ingress-nginx     Active        30h</span><br><span class="line">kube-node-lease   Active        5d4h</span><br><span class="line">kube-public       Active        5d4h</span><br><span class="line">kube-system       Active        5d4h</span><br><span class="line">kubevirt          Terminating   2d2h   # &lt;------ here</span><br><span class="line"></span><br><span class="line">1、新开一个窗口运行命令  kubectl proxy</span><br><span class="line">&gt; 此命令启动了一个代理服务来接收来自你本机的HTTP连接并转发至API服务器，同时处理身份认证</span><br><span class="line"></span><br><span class="line">2、新开一个终端窗口，将下面shell脚本整理到文本内`1.sh`并执行，$1参数即为删除不了的ns名称</span><br><span class="line">#------------------------------------------------------------------------------------</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">set -eo pipefail</span><br><span class="line"></span><br><span class="line">die() &#123; echo &quot;$*&quot; 1&gt;&amp;2 ; exit 1; &#125;</span><br><span class="line"></span><br><span class="line">need() &#123;</span><br><span class="line">        which &quot;$1&quot; &amp;&gt;/dev/null || die &quot;Binary &#x27;$1&#x27; is missing but required&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># checking pre-reqs</span><br><span class="line"></span><br><span class="line">need &quot;jq&quot;</span><br><span class="line">need &quot;curl&quot;</span><br><span class="line">need &quot;kubectl&quot;</span><br><span class="line"></span><br><span class="line">PROJECT=&quot;$1&quot;</span><br><span class="line">shift</span><br><span class="line"></span><br><span class="line">test -n &quot;$PROJECT&quot; || die &quot;Missing arguments: kill-ns &lt;namespace&gt;&quot;</span><br><span class="line"></span><br><span class="line">kubectl proxy &amp;&gt;/dev/null &amp;</span><br><span class="line">PROXY_PID=$!</span><br><span class="line">killproxy () &#123;</span><br><span class="line">        kill $PROXY_PID</span><br><span class="line">&#125;</span><br><span class="line">trap killproxy EXIT</span><br><span class="line"></span><br><span class="line">sleep 1 # give the proxy a second</span><br><span class="line"></span><br><span class="line">kubectl get namespace &quot;$PROJECT&quot; -o json | jq &#x27;del(.spec.finalizers[] | select(&quot;kubernetes&quot;))&#x27; | curl -s -k -H &quot;Content-Type: application/json&quot; -X PUT -o /dev/null --data-binary @- http://localhost:8001/api/v1/namespaces/$PROJECT/finalize &amp;&amp; echo &quot;Killed namespace: $PROJECT&quot;</span><br><span class="line">#------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">3. 执行脚本删除</span><br><span class="line"># bash 1.sh kubevirt</span><br><span class="line">Killed namespace: kubevirt</span><br><span class="line">1.sh: line 23: kill: (9098) - No such process</span><br><span class="line"></span><br><span class="line">5、查看结果</span><br><span class="line"># kubectl get ns    </span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   5d4h</span><br><span class="line">ingress-nginx     Active   30h</span><br><span class="line">kube-node-lease   Active   5d4h</span><br><span class="line">kube-public       Active   5d4h</span><br><span class="line">kube-system       Active   5d4h</span><br></pre></td></tr></table></figure>

<h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a><strong>Pod</strong></h1><blockquote>
<p>开篇先来个加人头秘籍（上上下下左右左右BABA，知道这个游戏的朋友请举个手^0^）</p>
<p>kubectl作为管理K8s的重要cli命令行工具，运维人员必须掌握它，但里面这么多的子命令，记不住怎么办？这里就以创建pod举例</p>
</blockquote>
<p>擅用-h 帮助参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在新版本的K8s中，明确了相关命令就是用来创建对应资源的，不再像老版本那样混合使用，这个不是重点，创建pod，我们用kubectl run -h，来查看命令帮助，是不是豁然开朗</span><br><span class="line"># kubectl run -h</span><br><span class="line">Create and run a particular image in a pod.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  # Start a nginx pod.</span><br><span class="line">  kubectl run nginx --image=nginx</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"># 我们就用示例给出的第一个示例，来创建一个nginx的pod</span><br><span class="line"># kubectl run nginx --image=nginx</span><br><span class="line">pod/nginx created</span><br><span class="line"></span><br><span class="line"># 等待镜像下载完成后，pod就会正常running了（这里介绍两个实用参数 -w代表持久监听当前namespace下的指定资源的变化；-o wide代表列出更为详细的信息，比如这里pod运行的node节点显示）</span><br><span class="line"># 注： READY下面的含义是后面数字1代表这个pod里面期望的容器数量，前面的数字1代表服务正常运行就绪的容器数量</span><br><span class="line"># kubectl  get pod -w -o wide</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx                   1/1     Running   0          2m35s   172.20.139.67   10.0.1.203   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"># 我们来请求下这个pod的IP</span><br><span class="line"># curl 172.20.139.67</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"># 我们进到这个pod服务内，修改下页面信息看看，这里会学到exec子命令，-it代表保持tty连接，不会一连上pod就断开了</span><br><span class="line"># kubectl -it exec nginx -- sh</span><br><span class="line"># echo &#x27;hello, world!&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class="line"># exit</span><br><span class="line"></span><br><span class="line"># curl 172.20.139.67</span><br><span class="line">hello, world!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 我们来详细分析的这个pod启动的整个流程，这里会用到kubectl的子命令 describe，它是用来描述后面所接资源的详细信息的，划重点，这个命令对于我们生产中排查K8s的问题尤其重要</span><br><span class="line"># kubectl  describe pod nginx   # 这里显示内容较多，目前我只把当前关键的信息列出来</span><br><span class="line"></span><br><span class="line">Name:         nginx</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         10.0.1.203/10.0.1.203</span><br><span class="line">Start Time:   Tue, 24 Nov 2020 14:23:56 +0800</span><br><span class="line">Labels:       run=nginx</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           172.20.139.67</span><br><span class="line">IPs:</span><br><span class="line">  IP:  172.20.139.67</span><br><span class="line">Containers:</span><br><span class="line">  nginx:</span><br><span class="line">    Container ID:   docker://2578019be269d7b1ad02ab4dd0a8b883e79fc491ae9c5db6164120f3e1dde8c7</span><br><span class="line">    Image:          nginx</span><br><span class="line">    Image ID:       docker-pullable://nginx@sha256:c3a1592d2b6d275bef4087573355827b200b00ffc2d9849890a4f3aa2128c4ae</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Running</span><br><span class="line">......中间内容省略</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age    From               Message</span><br><span class="line">  ----    ------     ----   ----               -------</span><br><span class="line">  Normal  Scheduled  5m41s  default-scheduler  Successfully assigned default/nginx to 10.0.1.203</span><br><span class="line">  Normal  Pulling    5m40s  kubelet            Pulling image &quot;nginx&quot;</span><br><span class="line">  Normal  Pulled     5m25s  kubelet            Successfully pulled image &quot;nginx&quot;</span><br><span class="line">  Normal  Created    5m25s  kubelet            Created container nginx</span><br><span class="line">  Normal  Started    5m25s  kubelet            Started container nginx</span><br><span class="line">  </span><br><span class="line"> # 重点分析下最后面的Events事件链</span><br><span class="line">1. kubectl 发送部署pod的请求到 API Server</span><br><span class="line">2. API Server 通知 Controller Manager 创建一个 pod 资源</span><br><span class="line">3. Scheduler 执行调度任务，Events的第一条打印信息就明确显示了这个pod被调度到10.0.1.203这个node节点上运行，接着开始拉取相应容器镜像，拉取完成后开始创建nginx服务，至到最后服务创建完成，在有时候服务报错的时候，这里也会显示相应详细的报错信息</span><br></pre></td></tr></table></figure>

<p>但我们在生产中是不建议直接用来创建pod，先直接演示下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 我们删除掉这个nginx的pod</span><br><span class="line"># kubectl delete pod nginx</span><br><span class="line">pod &quot;nginx&quot; deleted</span><br><span class="line"></span><br><span class="line"># kubectl get pod</span><br><span class="line">现在已经看不到这个pod了，假设这里是我们运行的一个服务，而恰好运行这个pod的这台node当机了，那么这个服务就没了，它不会自动飘移到其他node上去，也就发挥不了K8s最重要的保持期待的服务特性了。</span><br></pre></td></tr></table></figure>

<p>小技巧之列出镜像的相关tag，方便进行镜像tag版本选择：</p>
<blockquote>
<p>这个脚本是从二进制安装K8S那个项目里面提取的一个小脚本，因为用来查docker镜像版本很方便，所以在这里分享给大家</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat /opt/kube/bin/docker-tag        </span><br><span class="line">#!/bin/bash</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">MTAG=$2</span><br><span class="line">CONTAIN=$3</span><br><span class="line"></span><br><span class="line">function usage() &#123;</span><br><span class="line">cat &lt;&lt; HELP</span><br><span class="line"></span><br><span class="line">docker-tag  --  list all tags for a Docker image on a remote registry</span><br><span class="line"></span><br><span class="line">EXAMPLe:</span><br><span class="line">    - list all tags for nginx:</span><br><span class="line">       docker-tag tags nginx</span><br><span class="line"></span><br><span class="line">    - list all nginx tags containing alpine:</span><br><span class="line">       docker-tag tags nginx alpine</span><br><span class="line"></span><br><span class="line">HELP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ $# -lt 1 ]; then</span><br><span class="line">        usage</span><br><span class="line">        exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">function tags() &#123;</span><br><span class="line">    TAGS=$(curl -ksL https://registry.hub.docker.com/v1/repositories/$&#123;MTAG&#125;/tags | sed -e &#x27;s/[][]//g&#x27; -e &#x27;s/&quot;//g&#x27; -e &#x27;s/ //g&#x27; | tr &#x27;&#125;&#x27; &#x27;\n&#x27;  | awk -e: &#x27;&#123;print $3&#125;&#x27;)</span><br><span class="line">    if [ &quot;$&#123;CONTAIN&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        echo -e $(echo &quot;$&#123;TAGS&#125;&quot; | grep &quot;$&#123;CONTAIN&#125;&quot;) | tr &#x27; &#x27; &#x27;\n&#x27;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$&#123;TAGS&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    tags)</span><br><span class="line">        tags</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        usage</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker-tag tags nginx        </span><br><span class="line">latest</span><br><span class="line">1</span><br><span class="line">1-alpine</span><br><span class="line">1-alpine-perl</span><br><span class="line">1-perl</span><br><span class="line">1.10</span><br><span class="line">1.10-alpine</span><br></pre></td></tr></table></figure>

<p>pod小怪战斗（作业）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 试着创建一个redis服务的pod，并且使用exec进入这个pod，通过客户端命令redis-cli连接到redis-server ，插入一个key a ,value 为666，最后删除这个redis的pod</span><br><span class="line">root@redis:/data# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; get a</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; set a 666</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get a</span><br><span class="line">&quot;666&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>容器云</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>容器</tag>
      </tags>
  </entry>
</search>
